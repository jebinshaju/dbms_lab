DATABASE MANGEMENT SYSTEMS LAB - S5CSE 
I. FAMILARISATION OF SQL COMMANDS (Set 1)
1. Create a Student table with the following fields
Name, Roll no, Age, Branch and insert the following data into the table.
Name Roll no Age Branch
Anil Kumar 201 18 CS
Ramesh V. 202 19 ME
John Paul 103 17 EC
Reema Dev 111 16 CS
Sachin Gaur 301 18 ME
2. Create table called ‘Distributor’ with columns Dcode, Codename, Amount, Limit
and insert the following data.
Dcode Codename Amount Limit
207 BlueStar Ltd 78,000 1,00,000
202 HCL Ltd 80,000 1,00,000
150 Microsystems 60,000 80,000
160 PHI Systems - 90,000
203 Soft Agency 80,000 90,000
3. Create a table called ‘Agencies’ with columns
Agcode, Agname, Amount, Aglimit and insert the following data into the table
Agcode Agname Amount Aglimit
401 Nath & Co 2500 10,000
402 Ram Sons 3600 10,000
403 Krishna Stores 4000 15,000
409 Kantt Mart 3279 10,000
407 Paico - 10,000
4. Alter the structure of table student by adding a column called Totmarks and insert 
values into the added field
5. Update the ‘Agencies table, set amount field to 5000 corresponding to Agcode = 403.
6. Delete records from distributor table, whose amount is less than 70,000.
7. Display the Agcode and Agname from table Agencies in reverse order of their 
amount.
8. Display all Agency names for amount less than 4000 from table ‘Agencies’.
9. Display the student info from student table renaming the fields name as studentname, 
roll no as student_rollno.
10. Display the student info only in CS.
11. Update the limit field and amount field of distributor table to 1, 50,000 and 10,000 
respectively whose limit is 1,00,000.
12. Display the average of total marks of the students



create table student50 (Name varchar(12),RollNo number(3),Age number(3),Branch varchar(6));
insert into student50 (Name,RollNo,Age,Branch) values ('Reema Devi',111,16,'CS');
insert into student50 (Name,RollNo,Age,Branch) values ('Anil Kumar',201,18,'CS');
insert into student50 (Name,RollNo,Age,Branch) values ('Ramesh V',202,19,'ME');
insert into student50 (Name,RollNo,Age,Branch) values ('John Paul',103,17,'EC');
insert into student50 (Name,RollNo,Age,Branch) values ('Sachin Gaur',301,18,'ME');

NAME             ROLLNO        AGE BRANCH
------------ ---------- ---------- ------
Reema Devi          111         16 CS
Anil Kumar          201         18 CS
Ramesh V            202         19 ME
John Paul           103         17 EC
Sachin Gaur         301         18 ME

create table distributor50 (Dcode number(3),Codename varchar(15),Amount number(7),Limit number(8));
insert into distributor50 (Dcode,Codename,Amount,Limit) values (207,'Bluestar LTD',78000,100000);
insert into distributor50 (Dcode,Codename,Amount,Limit) values (202,'HCL LTD',80000,100000);
insert into distributor50 (Dcode,Codename,Amount,Limit) values (150,'Micro Systems',60000,80000);
insert into distributor50 (Dcode,Codename,Limit) values (160,'PHI systems',90000);
insert into distributor50 (Dcode,Codename,Amount,Limit) values (203,'Soft agency',80000,90000);


SQL> select * from distributor50;

     DCODE CODENAME            AMOUNT      LIMIT
---------- --------------- ---------- ----------
       207 Bluestar LTD         78000     100000
       202 HCL LTD              80000     100000
       150 Micro Systems        60000      80000
       160 PHI systems                     90000
       203 Soft agency          80000      90000

create table agencies50 (Agcode number(3),Agname varchar(15),Amount number(7),AgLimit number(8));
insert into agencies50 (Agcode,Agname,Amount,AgLimit) values (401,'Nath and Co',2500 ,10000);
insert into agencies50 (Agcode,Agname,Amount,AgLimit) values (402,'Ram Sons',3600,10000);
insert into agencies50 (Agcode,Agname,Amount,AgLimit) values (403,'Krishna Stores',4000,15000);
insert into agencies50 (Agcode,Agname,Amount,AgLimit) values (409,'Kantt Mart',3279,10000);
insert into agencies50 (Agcode,Agname,AgLimit) values (407,'Paico',10000);

SQL> select * from agencies50;

    AGCODE AGNAME              AMOUNT    AGLIMIT
---------- --------------- ---------- ----------
       401 Nath and Co           2500      10000
       402 Ram Sons              3600      10000
       403 Krishna Stores        4000      15000
       409 Kantt Mart            3279      10000
       407 Paico                           10000

alter table student50 add (Totmarks number(5));
update student50 set Totmarks = 99 where ROLLNO = 111;
update student50 set Totmarks = 95 where ROLLNO = 201;
update student50 set Totmarks = 93 where ROLLNO = 202;
update student50 set Totmarks = 91 where ROLLNO = 103;
update student50 set Totmarks = 89 where ROLLNO = 301;

SQL> select * from student50;

NAME             ROLLNO        AGE BRANCH   TOTMARKS
------------ ---------- ---------- ------ ----------
Reema Devi          111         16 CS             99
Anil Kumar          201         18 CS             95
Ramesh V            202         19 ME             93
John Paul           103         17 EC             91
Sachin Gaur         301         18 ME             89

update agencies50 set AMOUNT = 5000 where AGCODE = 403;

1 row updated.



delete from distributor50 where Amount<70000;

SQL> delete from distributor50 where Amount<70000;

1 row deleted.

SQL> select * from distributor50;

     DCODE CODENAME            AMOUNT      LIMIT
---------- --------------- ---------- ----------
       207 Bluestar LTD         78000     100000
       202 HCL LTD              80000     100000
       160 PHI systems                     90000
       203 Soft agency          80000      90000

select agcode, agname from agencies50 order by amount desc; 


    AGCODE AGNAME
---------- ---------------
       407 Paico
       403 Krishna Stores
       402 Ram Sons
       409 Kantt Mart
       401 Nath and Co

select agname from agencies50 where amount<4000;


AGNAME
---------------
Nath and Co
Ram Sons
Kantt Mart

select name as studentname,rollno as student_rollno from student50;


STUDENTNAME  STUDENT_ROLLNO
------------ --------------
Reema Devi              111
Anil Kumar              201
Ramesh V                202
John Paul               103
Sachin Gaur             301

select * from student50 where branch = 'CS';


NAME             ROLLNO        AGE BRANCH   TOTMARKS
------------ ---------- ---------- ------ ----------
Reema Devi          111         16 CS             99
Anil Kumar          201         18 CS             95


update distributor50 set limit = 150000 , amount = 10000 where limit = 100000;



     DCODE CODENAME            AMOUNT      LIMIT
---------- --------------- ---------- ----------
       207 Bluestar LTD         10000     150000
       202 HCL LTD              10000     150000
       160 PHI systems                     90000
       203 Soft agency          80000      90000




select avg(totmarks) as averege_mark from student50;
AVEREGE_MARK
------------
        93.4










I. FAMILARISATION OF SQL COMMANDS (Set 2)
1. EMPLOYEE
ENO Primary key, and first letter is E
ENAME Not Null
SALARY Should not be zero
DNO Foreign key referencing DNO of DEPARTMENT
MNGRNO
DOJ
JOB
ADDRESS
CITY Values must be Cochin, Bombay, Madras, Delhi
PINCODE
Eno = employee number, dno = department number, mngrno = manager 
number, doj = date of joining.
2. DEPARTMENT
DNO Primary Key
DNAME Not Null
CNT_EMP Should not be greater than 15
DEPT_HOD
Cnt_emp = employee count, dept_hod = head of the department
I. Create Tables Employee and department with the corresponding fields and constraints given above. 
a) List the name of Employees joined after 1- 1- 1998 and working in department number d10.
b) List all employees working in department other than department number d30.
c) List the name of employees working in department sales.
d) List the name of employees who does not have a manager.
e) List the employees whose names starts with ‘J’ and ‘N’ as third character.
f) List all the employees joined during the year 2000.
g) List the name of employees along with their annual salary, and also for each record, get the output,Every year <ename> earns <amount>
h) Find the total number of employees in employee table.
i) Display the minimum salary of various categories of employees.
j) List the minimum salary of various categories of employees in various departments having minimum salary greater than 7,000.
k) Find the minimum salary of manager in various departments.
l) List the names of all clerks along with the names of departments.
m) List the employee names and their date of joining in format dd/mm/yy.





create table employee50(Eno varchar(3) primary key,ename varchar(10) not null, salary number(5),dno varchar(3) REFERENCES department50, mngrno varchar(3),
 doj date, job varchar(10), 
address varchar(10), 
city varchar(20),pincode number(6) , check (salary <>0),CHECK(eno like'E%'),
check(city in('Cochin','Bombay','Madras','Delhi')) );



alter table employeee

create table department50(dno varchar(3) primary key,dname varchar(10) not null,cnt_emp number(3),check(cnt_emp <15), dept_hod varchar(10));

insert into employee50 (Eno,ename,salary,dno,mngrno ,doj , job , address,city ,pincode) values ('E01', 'Johan',10000,'D10','E04','1-jan-1996','sales','aluva','Cochin',653821 );
insert into employee50 (Eno,ename,salary,dno ,doj , job , address,city ,pincode) values ('E02', 'Nevin',7000,'D20','1-jan-2000','clerk','andheri','Bombay',653231 );
insert into employee50 (Eno,ename,salary,dno,mngrno ,doj , job , address,city ,pincode) values ('E03', 'Binu',12000,'D30','E20','1-jan-2006','cleaner','kora','Madras',653823 );
insert into employee50 (Eno,ename,salary,dno,mngrno ,doj , job , address,city ,pincode) values ('E04', 'Samon',5000,'D10','E21','1-jan-1999','baker','varnasi','Delhi',653577 );
insert into employee50 (Eno,ename,salary,dno,mngrno ,doj , job , address,city ,pincode) values ('E05', 'Kevin',19000,'D30','E30','1-jan-1996','sales','vyttila','Cochin',653467 );

insert into department50 (dno,dname,cnt_emp,dept_hod) values ('D10', 'civil' ,10 ,'jerald' );
insert into department50 (dno,dname,cnt_emp,dept_hod) values ('D20', 'cs' ,11 ,'judin' );
insert into department50 (dno,dname,cnt_emp,dept_hod) values ('D30', 'mechanical' ,9 ,'thomas' );
insert into department50 (dno,dname,cnt_emp,dept_hod) values ('D40', 'ec' ,8 ,'jebin' );
insert into department50 (dno,dname,cnt_emp,dept_hod) values ('D50', 'eee' ,14 ,'saalem' );




SQL>  select * from employee50;
ENO ENAME          SALARY DNO MNG DOJ       JOB        ADDRESS    CITY                    PINCODE
--- ---------- ---------- --- --- --------- ---------- ---------- -------------------- ----------
E02 Nevin            7000 D20     01-JAN-00 clerk      andheri    Bombay                   653231
E03 Binu            12000 D30 E20 01-JAN-06 cleaner    kora       Madras                   653823
E04 Samon            5000 D10 E21 01-JAN-99 baker      varnasi    Delhi                    653577
E05 Kevin           19000 D30 E30 01-JAN-96 sales      vyttila    Cochin                   653467
E01 Johan           10000 D10 E04 01-JAN-96 sales      aluva      Cochin                   653821

SQL> select * from department50;

DNO DNAME         CNT_EMP DEPT_HOD
--- ---------- ---------- ----------
D10 civil              10 jerald
D20 cs                 11 judin
D30 mechanical          9 thomas
D40 ec                  8 jebin
D50 eee                14 saalem


SQL> select * from employee50 where doj> '1-jan-1998' and dno ='D10';

ENO ENAME          SALARY DNO MNG DOJ       JOB        ADDRESS    CITY                    PINCODE
--- ---------- ---------- --- --- --------- ---------- ---------- -------------------- ----------
E04 Samon            5000 D10 E21 01-JAN-99 baker      varnasi    Delhi                    653577


SQL> select * from employee50 where dno <> 'D30';

ENO ENAME          SALARY DNO MNG DOJ       JOB        ADDRESS    CITY                    PINCODE
--- ---------- ---------- --- --- --------- ---------- ---------- -------------------- ----------
E02 Nevin            7000 D20     01-JAN-00 clerk      andheri    Bombay                   653231
E04 Samon            5000 D10 E21 01-JAN-99 baker      varnasi    Delhi                    653577
E01 Johan           10000 D10 E04 01-JAN-96 sales      aluva      Cochin                   653821



SQL> select ename from employee50 where job = 'sales';

ENAME
----------
Kevin
Johan

SQL> select ename from employee50 where mngrno is null;

ENAME
----------
Nevin


SQL> select * from employee50 where ename like'J_n%';

ENO ENAME          SALARY DNO MNG DOJ       JOB        ADDRESS    CITY                    PINCODE
--- ---------- ---------- --- --- --------- ---------- ---------- -------------------- ----------
E01 Jonah           10000 D10 E04 01-JAN-96 sales      aluva      Cochin                   653821


SQL> select * from employee50 where doj between '1-jan-2000' and '31-dec-2000';

ENO ENAME          SALARY DNO MNG DOJ       JOB        ADDRESS    CITY                    PINCODE
--- ---------- ---------- --- --- --------- ---------- ---------- -------------------- ----------
E02 Nevin            7000 D20     01-JAN-00 clerk      andheri    Bombay                   653231



SQL> select count(*) from employee50;

  COUNT(*)
----------
         5

select 'Every year '|| ename ||' earns ' || salary as salary details  from employee50;



SQL> 
SQL> select 'Every year '|| ename ||' earns ' || salary from employee50;

'EVERYYEAR'||ENAME||'EARNS'||SALARY
--------------------------------------------------------------------
Every year Nevin earns 7000
Every year Binu earns 12000
Every year Samon earns 5000
Every year Kevin earns 19000
Every year Jonah earns 10000

SQL> select count(*) from employee50;

  COUNT(*)
----------
         5


SQL> select min(salary), dname from employee50 e, department50 d where e.dno = d.dno group by dname;


MIN(SALARY) DNAME
----------- ----------
       5000 civil
       7000 cs
      12000 mechanical



SQL> select min(salary), dname from employee50 e, department50 d where e.dno = d.dno group by dname 
having min(salary) > 7000;

MIN(SALARY) DNAME
----------- ----------
      12000 mechanical


select * from department50;



SQL> select min(salary), dname from employee50 e, department50 d where e.dno = d.dno and mngrn
ot null group by dname;

MIN(SALARY) DNAME
----------- ----------
       5000 civil
      12000 mechanical



SQL> select ename, dname from employee50 e, department50 d where e.dno = d.dno and job = 'clerk';

ENAME      DNAME
---------- ----------
Nevin      cs



SQL>  select ename, TO_CHAR(doj,'DD/MM/YYYY') doj from employee50;

ENAME      DOJ
---------- ----------
Nevin      01/01/2000
Binu       01/01/2006
Samon      01/01/1999
Kevin      01/01/1996
Jonah      01/01/1996


pl/sql


set serveroutput on;
declare 
m number (20) := 20;
begin
dbms_output.put_line('The number is' || m);
end;

set serveroutput on;
declare 
m number (20) := 20;
n number (20) := 30;
o number (20);
begin
o := m+n;
dbms_output.put_line('The answer is ' || o);
end;

set serveroutput on;
declare 
m number (20);
n number (20);
o number (20);
begin
m := &m;
n := &n;
o := m+n;
dbms_output.put_line('The answer is ' || o);
end;

Enter value for m: 10
old   6: m := &m;
new   6: m := 10;
Enter value for n: 20
old   7: n := &n;
new   7: n := 20;
The answer is 30




set serveroutput on;
declare
s number (20);
n number (20);
i number (20);
begin
n := &n;
s := 0;
n := n*2;
for i in 1..n loop
if (i mod 2) <> 0 then
s := s+i;

end if;
end loop;
dbms_output.put_line('The sum is ' || s);
end;

Enter value for n: 5
old   6: n := &n;
new   6: n := 5;
The sum is 25


set serveroutput on;
DECLARE
  num1 NUMBER;
  num2 NUMBER;
  num3 NUMBER;
  greatest NUMBER;
  smallest NUMBER;
BEGIN

num1 := &num1;
num2 := &num2;
num3 := &num3;
  IF num1 >= num2 AND num1 >= num3 THEN
    greatest := num1;
  ELSIF num2 >= num1 AND num2 >= num3 THEN
    greatest := num2;
  ELSE
    greatest := num3;
  END IF;

  IF num1 <= num2 AND num1 <= num3 THEN
    smallest := num1;
  ELSIF num2 <= num1 AND num2 <= num3 THEN
    smallest := num2;
  ELSE
    smallest := num3;
  END IF;

  DBMS_OUTPUT.PUT_LINE('The greatest number is: ' || greatest);
  DBMS_OUTPUT.PUT_LINE('The smallest number is: ' || smallest);
END;
/




Enter value for num1: 23
old   9: num1 := &num1;
new   9: num1 := 23;
Enter value for num2: 54
old  10: num2 := &num2;
new  10: num2 := 54;
Enter value for num3: 5
old  11: num3 := &num3;
new  11: num3 := 5;
The greatest number is: 54
The smallest number is: 5

PL/SQL procedure successfully completed.






set serveroutput on;
declare
i number (20);
n number (20);
f number (20);
begin
n := &n;
f := 1;
for i in 1..n loop
f := f*i;
end loop;
dbms_output.put_line('The factorial of ' || n ||' is '|| f );
end;


Enter value for n: 5
old   6: n := &n;
new   6: n := 5;
The factorial of 5 is 120

PL/SQL procedure successfully completed.


set serveroutput on;
declare
n number (20);
i number (20);
a number (20);
b number (20);
c number (20);
begin
a := 0;
b :=1;
n :=&n;
n := n-2;
dbms_output.put_line(a);
dbms_output.put_line(b);
for i in 1..n loop
c :=a + b;
dbms_output.put_line(c);
a := b;
b := c;
end loop;
end;


Enter value for n: 6
old  10: n :=&n;
new  10: n :=6;
0
1
1
2
3
5

PL/SQL procedure successfully completed.



set severoutput on;
declare
a number (20);
d number (20);
begin
a := &amount;

if a > 5000 then
d := 0.20*a;
a := a - 0.20*a;

dbms_output.put_line('Discount available is ' || d);
dbms_output.put_line('Price after discount ' || a);

else
dbms_output.put_line('Amount to be payed is ' || a);
end if;
end;


Enter value for amount: 6000
old   5: a := &amount;
new   5: a := 6000;
Discount available is 1200
Price after discount 4800

PL/SQL procedure successfully completed.



set serveroutput on;
declare
str varchar(20);
i number(20);
rev varchar(20);
len number(20);
begin
str := '&string';
len := Length(str);
for i in reverse 1..len loop
                     
rev := rev || substr(str, i, 1);
end loop;
  
dbms_output.put_line('Reverse of string is ' || rev);

end;



Enter value for string: jebin
old   7: str := '&string';
new   7: str := 'jebin';
Reverse of string is nibej

PL/SQL procedure successfully completed.






create table temp50 (no number);
set serveroutput on;
declare
i number(20);

begin

for i in 1..15 loop
insert into temp50 (no) values (i);
end loop
commit;
end;
/


SQL> select * from temp50;

        NO
----------
         1
         2
         3
         4
         5
         6
         7
         8
         9
        10
        11
        12
        13
        14
        15

15 rows selected.





create table even50 (no number);
create table odd50 (no number);
set serveroutput on;
declare
i number(20);
begin

for i in 1..25 loop
if (i mod 2 <> 0) then
insert into odd50 (no) values(i);
else
insert into even50 (no) values (i);
end if;
end loop;
commit;
end;
/



SQL> select * from even50;

        NO
----------
         2
         4
         6
         8
        10
        12
        14
        16
        18
        20
        22
        24

12 rows selected.

SQL> select * from odd50;

        NO
----------
         1
         3
         5
         7
         9
        11
        13
        15
        17
        19
        21
        23
        25

13 rows selected.




create table table_income50 (ename varchar(20),salary number(20));
insert into table_income50 (ename,salary) values ('kuttapi',30000);
insert into table_income50 (ename,salary) values ('ramesh',3000);
insert into table_income50 (ename,salary) values ('ramesh',9000);
insert into table_income50 (ename,salary) values ('shasi',7000);
insert into table_income50 (ename,salary) values ('ramanan',9000);


set serveroutput on;
declare 
s number(20);

begin

select salary into s from table_income50 where ename = 'ramesh';

if (s >= 8000) then
	s := s+(s*0.2);
elsif (s >= 5000 and s < 8000) then
	s := s+(s*0.1);
else
	s := s+(s*0.05);
end if;
update table_income50 set salary = s where ename = 'ramesh';
end;
/

 update table_income50 set ename = 'ram' where salary = 3000;


SQL> select * from table_income50;

ENAME                    SALARY
-------------------- ----------
kuttapi                   30000
ram                        3000
ramesh                     9000
shasi                      7000
ramanan                    9000

SQL> select * from table_income50;

ENAME                    SALARY
-------------------- ----------
kuttapi                   30000
ram                        3000
ramesh                    10800
shasi                      7000
ramanan                    9000


https://silcnitc.github.io/lex.html

create table account50 (accno number,name varchar(20), balance number);

insert into account50 (accno,name,balance) values (01,'Jerald',10790);
insert into account50 (accno,name,balance) values (02'Judin',21090);
insert into account50 (accno,name,balance) values (03,'Johan',87790);
insert into account50 (accno,name,balance) values (04,'Jebin',1070);
insert into account50 (accno,name,balance) values (05,'kevin',7590);




SQL> select * from account50;

     ACCNO NAME                    BALANCE
---------- -------------------- ----------
         1 Jerald                    10790
         3 Johan                     87790
         4 Jebin                      1070
         5 kevin                      7590

set serveroutput on;
declare

amt number;
b number;
limit number;
acc number;
bal number;
temp number;
begin

acc := &account;
amt := &Amount;

select balance into b from account50 where accno = acc;
limit := 1000;
bal := b-amt;
if amt < b and bal >= limit then
	
	dbms_output.put_line('Amount with drawed is: ' || amt);
	b := b-amt;
	update account50 set balance = b where accno = acc;

elsif amt > b then

	amt := b - limit;

	dbms_output.put_line('Amount will be less than limit when withdrawn/ so ammount avilable is : ' || amt);
	dbms_output.put_line('Minimum balance is : ' || limit);
	update account50 set balance = limit where accno = acc;

elsif amt < b and bal <= limit then
	amt := b - limit;

	dbms_output.put_line('Amount will be less than limit when withdrawn/ so ammount avilable is : ' || amt);
	dbms_output.put_line('Minimum balance is : ' || limit);
	update account50 set balance = limit where accno = acc;

end if;
end;
/


Enter value for account: 4
old  11: acc := &account;
new  11: acc := 4;
Enter value for amount: 2000
old  12: amt := &Amount;
new  12: amt := 2000;
Amount will be less than limit when withdrawn/ so ammount avilable is : 70
Minimum balance is : 1000

PL/SQL procedure successfully completed.

SQL> select * from account50;

     ACCNO NAME                    BALANCE
---------- -------------------- ----------
         1 Jerald                    10790
         3 Johan                     87790
         4 Jebin                      1000
         5 kevin                      7590



Enter value for account: 1
old  11: acc := &account;
new  11: acc := 1;
Enter value for amount: 5000
old  12: amt := &Amount;
new  12: amt := 5000;
Amount with drawed is: 5000

PL/SQL procedure successfully completed.

SQL> select * from account50;

     ACCNO NAME                    BALANCE
---------- -------------------- ----------
         1 Jerald                     5790
         3 Johan                     87790
         4 Jebin                      1000
         5 kevin                      7590



Enter value for account: 4
old  11: acc := &account;
new  11: acc := 4;
Enter value for amount: 1000
old  12: amt := &Amount;
new  12: amt := 1000;

PL/SQL procedure successfully completed.

SQL> select * from account50;

     ACCNO NAME                    BALANCE
---------- -------------------- ----------
         1 Jerald                     5790
         3 Johan                     87790
         4 Jebin                      1000
         5 kevin                      7590

Enter value for account: 5
old  11: acc := &account;
new  11: acc := 5;
Enter value for amount: 10000
old  12: amt := &Amount;
new  12: amt := 10000;
Amount will be less than limit when withdrawn/ so ammount avilable is : 6590
Minimum balance is : 1000

PL/SQL procedure successfully completed.

SQL> select * from account50;

     ACCNO NAME                    BALANCE
---------- -------------------- ----------
         1 Jerald                     5790
         3 Johan                     87790
         4 Jebin                      1000
         5 kevin                      1000








create table bill50 (consumer_no number,present_reading number, past_reading number,units number,charge number);
insert into bill50 (consumer_no,present_reading,past_reading) values (1,300,290);
insert into bill50 (consumer_no,present_reading,past_reading) values (2,550,400);
insert into bill50 (consumer_no,present_reading,past_reading) values (3,500,450);
insert into bill50 (consumer_no,present_reading,past_reading) values (4,900,200);

SQL> select * from bill50;

CONSUMER_NO PRESENT_READING PAST_READING      UNITS     CHARGE
----------- --------------- ------------ ---------- ----------
          1             300          290
          2             550          400
          3             500          450
          4             900          200


set serveroutput on;
declare
customer_number number;
past number;
present number;
unit number;
charg number;

begin

customer_number := &customer_number;

select present_reading into present from bill50 where consumer_no = customer_number;
select past_reading into past from bill50 where consumer_no = customer_number;

unit := present - past;


update bill50 set units = unit where consumer_no = customer_number;

if unit < 20 then

	charg := 0;
	update bill50 set charge = charg where consumer_no = customer_number;
	

elsif unit >=20 and unit <=100 then

	charg := unit*50;
	update bill50 set charge = charg where consumer_no = customer_number;
	
elsif unit >=101 and unit <=300 then
	
	
	charg := unit*75;
	update bill50 set charge = charg where consumer_no = customer_number;
	
elsif unit >=301 and unit <=500 then
	
	charg := unit*150;
	update bill50 set charge = charg where consumer_no = customer_number;
	
else
	
	
	charg := unit*225;
	update bill50 set charge = charg where consumer_no = customer_number;
	
end if;
update bill50 set past_reading = present where consumer_no = customer_number;
update bill50 set present_reading = present+unit where consumer_no = customer_number;

select units into unit from bill50 where consumer_no = customer_number;
select charge into charg from bill50 where consumer_no = customer_number;
dbms_output.put_line('CONSUMER NO : ' || customer_number);
dbms_output.put_line('PRESENT READING : ' || present);
dbms_output.put_line('PAST READING : ' || past);
dbms_output.put_line('UNITS TAKEN : ' || unit);
dbms_output.put_line('CHARGE : ' || charg);
end;


Enter value for customer_number: 1
old  10: customer_number := &customer_number;
new  10: customer_number := 1;
CONSUMER NO : 1
PRESENT READING : 300
PAST READING : 290
UNITS TAKEN : 10
CHARGE : 0

PL/SQL procedure successfully completed.


Enter value for customer_number: 1
old  10: customer_number := &customer_number;
new  10: customer_number := 1;
CONSUMER NO : 1
PRESENT READING : 310
PAST READING : 300
UNITS TAKEN : 10
CHARGE : 0




Enter value for customer_number: 2
old  10: customer_number := &customer_number;
new  10: customer_number := 2;
CONSUMER NO : 2
PRESENT READING : 550
PAST READING : 400
UNITS TAKEN : 150
CHARGE : 7500

PL/SQL procedure successfully completed.



SQL> select * from bill50;

CONSUMER_NO PRESENT_READING PAST_READING      UNITS     CHARGE
----------- --------------- ------------ ---------- ----------
          1             300          290         10          0
          2             550          400        150       7500
          3             500          450         50       2500
          4             900          200        700      60000






create table student_marks50 (name varchar(20), roll_no number, mark1 number, mark2 number, mark3 number,total_marks number, grade varchar(20));

insert into student_marks50 (name,roll_no,mark1,mark2,mark3) values ('jerald',34,90,86,95);
insert into student_marks50 (name,roll_no,mark1,mark2,mark3) values ('judin',35,85,54,34);
insert into student_marks50 (name,roll_no,mark1,mark2,mark3) values ('kevin',36,78,54,76);
insert into student_marks50 (name,roll_no,mark1,mark2,mark3) values ('jogan',37,40,68,49);



SQL>  select * from student_marks50;

NAME                    ROLL_NO      MARK1      MARK2      MARK3 TOTAL_MARKS GRADE
-------------------- ---------- ---------- ---------- ---------- ----------- -------
jerald                       34         90         86         95
judin                        35         85         54         34
kevin                        36         78         54         76
jogan                        37         40         68         49



set serveroutput on;
declare
tot_marks number;
grade1 varchar(20);
student_name varchar(20);
m1 number;
m2 number;
m3 number;
roll number;
begin

student_name := '&student_name';

select mark1 into m1 from student_marks50 where name = student_name;
select mark2 into m2 from student_marks50 where name = student_name;
select mark3 into m3 from student_marks50 where name = student_name;


tot_marks := m1+m2+m3;


update student_marks50 set total_marks = tot_marks where name = student_name;

if tot_marks >= 250 then

	grade1 := 'Distinction';
	
elsif tot_marks >=180 and tot_marks <250 then

	grade1 := 'First Class';
	
elsif tot_marks >=120 and tot_marks <179 then

	grade1 := 'Second Class';

elsif tot_marks >=80 and tot_marks <119 then

	grade1 := 'Third Class';	
else
	grade1 := 'Fail';	
	
end if;

update student_marks50 set grade = grade1 where name = student_name;

select roll_no into roll from student_marks50 where name = student_name;

dbms_output.put_line('STUDENT NAME : ' || student_name);
dbms_output.put_line('ROLL NO : ' || roll);
dbms_output.put_line('TOTAL MARKS : ' || tot_marks);
dbms_output.put_line('GRADE : ' || grade1);

end;

Enter value for student_name: jogan
old  11: student_name := '&student_name';
new  11: student_name := 'jogan';
STUDENT NAME : jogan
ROLL NO : 37
TOTAL MARKS : 157
GRADE : Second Class


SQL> select * from student_marks50;

NAME                    ROLL_NO      MARK1      MARK2      MARK3 TOTAL_MARKS GRADE
-------------------- ---------- ---------- ---------- ---------- ----------- --------------------
jerald                       34         90         86         95         271 Distinction
judin                        35         85         54         34         173 Second Class
kevin                        36         78         54         76         208 First Class
jogan                        37         40         68         49         157 Second Class








cursor 

create table employee_50 (eno number,ename varchar(20),salary number);

insert into employee_50  (eno,ename,salary) values (1,'Tom',20000);
insert into employee_50  (eno,ename,salary) values (2,'Somy',30000);
insert into employee_50  (eno,ename,salary) values (3,'Kurian',40000);
insert into employee_50  (eno,ename,salary) values (4,'Varkey',10000);

SQL> select * from employee_50;

       ENO ENAME                    SALARY
---------- -------------------- ----------
         1 Tom                       20000
         2 Somy                      30000
         3 Kurian                    40000
         4 Varkey                    10000



set serveroutput on;
declare
sum1 number;

begin
savepoint sp;
update employee_50 set salary = salary+ salary * 0.2; 

select sum(salary) into sum1 from employee_50;

if sum1 > 100000 then
	rollback to sp;
	dbms_output.put_line('Rollback initiated');
end if;
commit;
dbms_output.put_line('Commited');
end;

Rollback initiated
Commited


SQL> select * from employee_50;

       ENO ENAME                    SALARY
---------- -------------------- ----------
         1 Tom                       20000
         2 Somy                      30000
         3 Kurian                    40000
         4 Varkey                    10000

update  employee_50 set salary = 100 where ename = 'Kurian';

SQL> select * from employee_50;

       ENO ENAME                    SALARY
---------- -------------------- ----------
         1 Tom                       24000
         2 Somy                      36000
         3 Kurian                      120
         4 Varkey                    12000






create table student_data50 (roll_no number,name varchar(20), tot_marks number, trade varchar(20), rank number );


create sequence seq;
start with 1;
increment by 1;
minvalue 1;
maxvalue 4;


insert into student_data50 (roll_no,name,tot_marks,trade) values (seq.nextval,'tony',90,'rocket_science');
insert into student_data50 (roll_no,name,tot_marks,trade) values (seq.nextval,'mathew',73,'computer_science');
insert into student_data50 (roll_no,name,tot_marks,trade) values (seq.nextval,'varkey',59,'material_science');
insert into student_data50 (roll_no,name,tot_marks,trade) values (seq.nextval,'kurian',86,'polymer_science');




SQL> select roll_no,name,tot_marks,trade from student_data50;

   ROLL_NO NAME                  TOT_MARKS TRADE                      RANK
---------- -------------------- ---------- -------------------- ----------
         1 tony                         90 rocket_science
         2 mathew                       73 computer_science
         3 varkey                       59 material_science
         4 kurian                       86 polymer_science


set serveroutput on;
declare
roll  number;
nam varchar(20);
tot number;
ran number := 1;

cursor c1 is select  roll_no,name,tot_marks from student_data50 order by tot_marks desc;

begin

open c1; 
loop
fetch c1 into roll,nam,tot;
exit when c1%notfound;
 	update  student_data50 set rank = ran where roll_no = roll;
	if ran <= 3 then
		dbms_output.put_line('Roll_no: ' || roll || ' Name: ' || nam || ' Rank: ' || ran);
	ran := ran+1;
	end if;
end loop;

end;

Roll_no: 1 Name: tony Rank: 1
Roll_no: 4 Name: kurian Rank: 2
Roll_no: 2 Name: mathew Rank: 3

PL/SQL procedure successfully completed.

SQL> select * from student_data50;

   ROLL_NO NAME                  TOT_MARKS TRADE                      RANK
---------- -------------------- ---------- -------------------- ----------
         1 tony                         90 rocket_science                1
         2 mathew                       73 computer_science              3
         3 varkey                       59 material_science              4
         4 kurian                       86 polymer_science               2




create table product50 (pno number, pname varchar(20), selling_price number, cost_price number);

insert into product50 (pno,pname,selling_price,cost_price) values (1,'toys',300,240);
insert into product50 (pno,pname,selling_price,cost_price) values (2,'fan',2500,2000);
insert into product50 (pno,pname,selling_price,cost_price) values (3,'monitors',10000,7000);
insert into product50 (pno,pname,selling_price,cost_price) values (4,'chair',500,540);
 

set serveroutput on;
declare
diff number;
cp number;
sp number;
name varchar(20);
ex exception;
cursor c1 is select pname,selling_price,cost_price from product50;

begin

open c1;
loop
	fetch c1 into name,sp,cp;
	exit when c1%notfound;
	if sp<cp then
		raise ex;
	end if;
end loop;
exception
when ex then 
	dbms_output.put_line('Exception raised for ' || name || ' !! selling price: '|| sp ||' is  greater than cost price: ' || cp);
end;



Exception raised for chair !! selling price: 500 is  greater than cost price: 540

PL/SQL procedure successfully completed.


SQL> select * from product50;

       PNO PNAME                SELLING_PRICE COST_PRICE
---------- -------------------- ------------- ----------
         1 toys                           300        240
         2 fan                           2500       2000
         3 monitors                     10000       7000
         4 chair                          500        540



Create a table T1 having two number fields(a,b). Insert values into T1. If a<b insert those tuples into another table T2 (having same two number fields) and reverse the corresponding tuples in T1.


create table t1_50 (a number, b number);
create table t2_50 (a number, b number);

insert into t1_50 (a,b) values (45,67);
insert into t1_50 (a,b) values (34,15);
insert into t1_50 (a,b) values (26,26);
insert into t1_50 (a,b) values (65,67);
insert into t1_50 (a,b) values (4,1);

SQL> select * from t1_50;

         A          B
---------- ----------
        45         67
        34         15
        26         26
        65         67
         4          1

set serveroutput on;
declare
a1 number;
b1 number;
temp number;

cursor c1 is select a,b from t1_50;

begin 

open c1;
loop
fetch c1 into a1,b1;
exit when c1%notfound;
	if a1<b1 then
		insert into t2_50 (a,b) values (a1,b1);
		update t1_50 set a= b1, b= a1 where a= a1;  	
	end if;
end loop;
end;




PL/SQL procedure successfully completed.

SQL> select * from t1_50;

         A          B
---------- ----------
        67         45
        34         15
        26         26
        67         65
         4          1

SQL> select * from t2_50;

         A          B
---------- ----------
        45         67
        65         67



6)	A bank has an ‘ACCTMASTER’ table where it holds the current status of a client’s bank account. Another table called ‘ACCTTRAN’ holds each transaction as it occurs at bank.(i.e. Deposits/Withdrawals of clients). The ‘ACCTTRAN’ table must hold a flag indicating whether the transaction was credit or debit. Write a PL/SQL program to update the ‘ACCTMASTER’ table and sets the balance depending upon whether the account is debited or credited. The updation should be done only for those records that are not processed.


create table acctmaster50 (accno number primary key, name varchar(20), balance number);

create table acctran50 (accno number REFERENCES acctmaster50,transactiondate date,deb_cred varchar(6),amount number,processed varchar(4));

insert into acctmaster50 (accno,name,balance) values (10,'tony',7532);
insert into acctmaster50 (accno,name,balance) values (11,'kurian',4000);
insert into acctmaster50 (accno,name,balance) values (12,'mathai',9955);
insert into acctmaster50 (accno,name,balance) values (13,'varkey',9336);

insert into acctran50 (accno,transactiondate,deb_cred,amount,processed) values (12,'1-jan-2023','credit',300,'yes');
insert into acctran50 (accno,transactiondate,deb_cred,amount,processed) values (10,'4-feb-2023','debit',313,'yes');
insert into acctran50 (accno,transactiondate,deb_cred,amount,processed) values (11,'6-jan-2023','credit',600,'no');
insert into acctran50 (accno,transactiondate,deb_cred,amount,processed) values (11,'21-mar-2023','credit',700,'yes');
insert into acctran50 (accno,transactiondate,deb_cred,amount,processed) values (10,'16-jan-2023','credit',900,'no');
insert into acctran50 (accno,transactiondate,deb_cred,amount,processed) values (13,'14-jan-2023','credit',200,'yes');




SQL>  select * from acctmaster50;

     ACCNO NAME                    BALANCE
---------- -------------------- ----------
        10 tony                       7219
        11 kurian                     4700
        12 mathai                    10255
        13 varkey                     9536



SQL> select * from acctran50;

     ACCNO TRANSACTI DEB_CR     AMOUNT PROC
---------- --------- ------ ---------- ----
        12 01-JAN-23 credit        300 yes
        10 04-FEB-23 debit         313 yes
        11 06-JAN-23 credit        600 no
        11 21-MAR-23 credit        700 yes
        10 16-JAN-23 credit        900 no
        13 14-JAN-23 credit        200 yes

6 rows selected.

set serveroutput on;
declare
acc number;
trandate date;
deb varchar(9);
amo number;
pro varchar(9);

cursor c1 is select accno,transactiondate,deb_cred,amount,processed from acctran50;

begin

open c1;
loop
	fetch c1 into acc,trandate,deb,amo,pro;
	exit when c1%notfound;
	if pro = 'no' then
		if deb = 'credit' then
			update acctmaster50 set balance = balance + amo where accno = acc;

		else 
			update acctmaster50 set balance = balance - amo where accno = acc;

		end if;
	end if;
end loop;
end;

SQL> select * from acctmaster50;

     ACCNO NAME                    BALANCE
---------- -------------------- ----------
        10 tony                       8119
        11 kurian                     5300
        12 mathai                    10255
        13 varkey                     9536


